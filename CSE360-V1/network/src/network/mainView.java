/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package network;
import java.util.*;
/**
 *
 * @author mmwoodfo
 */
public class mainView extends javax.swing.JFrame {
    public LinkedList list = new LinkedList();
    /**
     * Creates new form mainView
     */
    public mainView() {
        initComponents();
        
        //hides dependencies options if linked list is empty
        /*if(list.isEmpty() == true){
            //remove nodeDependenciesTxt and nodeDependencieslbl
            nodeDependenciesTxt.setVisible(false);
            nodeDependencieslbl.setVisible(false);
        //shows dependencies options if linked list is not empty
        }else{
            nodeDependenciesTxt.setVisible(true);
            nodeDependencieslbl.setVisible(true);
        }*/
        
        durationErrorLbl.setVisible(false); //hides error label on start up
        errorLbl.setVisible(false); //hides error label on start up
        requiredLbl.setVisible(false);
        infoTxt.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nodeNamelbl = new javax.swing.JLabel();
        nodeDurationlbl = new javax.swing.JLabel();
        nodeDependencieslbl = new javax.swing.JLabel();
        nodeNameTxt = new javax.swing.JTextField();
        nodeDurationTxt = new javax.swing.JTextField();
        addNodeBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayNodesField = new javax.swing.JTextArea();
        nodeDependenciesTxt = new javax.swing.JTextField();
        sortDurationBtn = new javax.swing.JButton();
        durationErrorLbl = new javax.swing.JLabel();
        errorLbl = new javax.swing.JLabel();
        listPathsBtn = new javax.swing.JButton();
        helpBtn = new javax.swing.JButton();
        aboutBtn = new javax.swing.JButton();
        Reset = new javax.swing.JButton();
        requiredLbl = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        infoTxt = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));

        nodeNamelbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nodeNamelbl.setText("Name: ");

        nodeDurationlbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nodeDurationlbl.setText("Duration:");

        nodeDependencieslbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nodeDependencieslbl.setText("Dependencies:");

        nodeNameTxt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nodeNameTxt.setToolTipText("Enter your activities name");

        nodeDurationTxt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nodeDurationTxt.setToolTipText("Enter your activities duration as a number");

        addNodeBtn.setBackground(new java.awt.Color(0, 0, 0));
        addNodeBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        addNodeBtn.setForeground(new java.awt.Color(255, 255, 255));
        addNodeBtn.setText("Add +");
        addNodeBtn.setToolTipText("Adds activity to your list");
        addNodeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNodeBtnActionPerformed(evt);
            }
        });

        displayNodesField.setColumns(20);
        displayNodesField.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        displayNodesField.setRows(5);
        jScrollPane1.setViewportView(displayNodesField);

        nodeDependenciesTxt.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nodeDependenciesTxt.setToolTipText("Enter your dependicies seperated by a comma");

        sortDurationBtn.setBackground(new java.awt.Color(0, 0, 0));
        sortDurationBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        sortDurationBtn.setForeground(new java.awt.Color(255, 255, 255));
        sortDurationBtn.setText("List Individual Nodes");
        sortDurationBtn.setToolTipText("This will sort your individual nodes by their duration");
        sortDurationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortDurationBtnActionPerformed(evt);
            }
        });

        durationErrorLbl.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        durationErrorLbl.setForeground(new java.awt.Color(255, 0, 0));
        durationErrorLbl.setText("Not a number!");

        errorLbl.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        errorLbl.setForeground(new java.awt.Color(255, 0, 0));
        errorLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        errorLbl.setText("Error: Could not Add Node");

        listPathsBtn.setBackground(new java.awt.Color(0, 0, 0));
        listPathsBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        listPathsBtn.setForeground(new java.awt.Color(255, 255, 255));
        listPathsBtn.setText("List Paths");
        listPathsBtn.setToolTipText("This will list the paths sorted from shortest to longest");
        listPathsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listPathsBtnActionPerformed(evt);
            }
        });

        helpBtn.setBackground(new java.awt.Color(102, 0, 0));
        helpBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        helpBtn.setForeground(new java.awt.Color(255, 255, 255));
        helpBtn.setText("Help");
        helpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpBtnActionPerformed(evt);
            }
        });

        aboutBtn.setBackground(new java.awt.Color(102, 0, 0));
        aboutBtn.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        aboutBtn.setForeground(new java.awt.Color(255, 255, 255));
        aboutBtn.setText("About");
        aboutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutBtnActionPerformed(evt);
            }
        });

        Reset.setBackground(new java.awt.Color(102, 0, 0));
        Reset.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Reset.setForeground(new java.awt.Color(255, 255, 255));
        Reset.setText("Reset");
        Reset.setToolTipText("Delete all activities");
        Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetActionPerformed(evt);
            }
        });

        requiredLbl.setFont(new java.awt.Font("Courier New", 0, 14)); // NOI18N
        requiredLbl.setForeground(new java.awt.Color(255, 0, 51));
        requiredLbl.setText("*Required");

        infoTxt.setBackground(new java.awt.Color(204, 204, 204));
        infoTxt.setColumns(20);
        infoTxt.setRows(5);
        jScrollPane2.setViewportView(infoTxt);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(addNodeBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(errorLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nodeNamelbl)
                            .addComponent(nodeDurationlbl)
                            .addComponent(nodeDependencieslbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nodeNameTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                            .addComponent(nodeDurationTxt)
                            .addComponent(nodeDependenciesTxt))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(durationErrorLbl)
                            .addComponent(requiredLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(aboutBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(helpBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sortDurationBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(listPathsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Reset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE))
                .addGap(26, 26, 26))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nodeNamelbl)
                            .addComponent(nodeNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(requiredLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nodeDurationlbl)
                            .addComponent(nodeDurationTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(durationErrorLbl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nodeDependencieslbl)
                            .addComponent(nodeDependenciesTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(addNodeBtn)
                        .addGap(18, 18, 18)
                        .addComponent(errorLbl)
                        .addGap(34, 34, 34)
                        .addComponent(helpBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aboutBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(sortDurationBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listPathsBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Reset)))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//=========================== Add Node Button =======================================
    private void addNodeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNodeBtnActionPerformed

        boolean isNum = false;
        Node newNode = new Node();
        errorLbl.setVisible(false);
        Boolean nameEmpty = false;
        //sets name of node
        String nodeNameStr = nodeNameTxt.getText();
        if(nodeNameStr.equals("")){
            nameEmpty = true;
            requiredLbl.setVisible(true);
        }else{
           newNode.setName(nodeNameStr); 
           requiredLbl.setVisible(false);
        }
        
        //try-catch to check if input is an int
        try{
            //input is an integer - convert to int
            int nodeDurationInt = Integer.parseInt(nodeDurationTxt.getText());
            //sets duration of node
            newNode.setDuration(nodeDurationInt); 
            durationErrorLbl.setVisible(false);
            isNum = true;
        }catch(NumberFormatException e){
           //input is not an integer
           durationErrorLbl.setVisible(true);
           isNum = false;
        }
        
        if(isNum == true && nameEmpty == false){
            //convert CSV to array
            String nodeDependiciesStr = nodeDependenciesTxt.getText();
            String[] nodeDependiciesArr = nodeDependiciesStr.split("\\s*,\\s*"); 
            //sets node dependicies array
            newNode.setDependicies(nodeDependiciesArr);
            newNode.setDependiciesCpy2(nodeDependiciesArr);
            newNode.setDependiciesCpy2(nodeDependiciesArr);
            
            //add node to end of linked list
            list.addLast(newNode);
        
            //displays the contents of the linked list
            displayNodesField.setText(list.printString()); 
        
            //shows dependencies options after first node is added
            //nodeDependenciesTxt.setVisible(true);
            //nodeDependencieslbl.setVisible(true);
        
            //resets textFields
            nodeNameTxt.setText("");
            nodeDurationTxt.setText("");
            nodeDependenciesTxt.setText("");
        }//end if isNum == true
        else{ //error, could not add node
            errorLbl.setText("Error: Could not Add Node");
            errorLbl.setVisible(true);
        }
    }//GEN-LAST:event_addNodeBtnActionPerformed

    private void listPathsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listPathsBtnActionPerformed

//--------- Error Checking ----------------
        Node[] end2 = list.findLastNodes();
        Node[] end1 = list.findLastNodes();
        Node[] start1 = list.findFirstNodes();
        if(list.isEmpty() == true){
            errorLbl.setVisible(true);
            errorLbl.setText("There are no nodes in the list");
            displayNodesField.setText(""); 
            list.resetList();
        }else if(start1[0] == null){
            errorLbl.setVisible(true);
            errorLbl.setText("There are no starting nodes");
            displayNodesField.setText(""); 
            list.resetList();
        }else if(end1[0] == null){
            errorLbl.setVisible(true);
            errorLbl.setText("There are no ending nodes");
            displayNodesField.setText(""); 
            list.resetList();
        }else if(end2[1] != null){
            errorLbl.setVisible(true);
            errorLbl.setText("There is more than one ending node");
            displayNodesField.setText(""); 
            list.resetList();
            
        //---------- Error checking passed ------------------
        }else{
            errorLbl.setVisible(false);
            boolean error = false;
            int numOfPaths = list.numberOfPaths();
            
            pathObject[] pathObj = new pathObject[numOfPaths];
        //------------- populating path object array ---------------
            for(int i = 0; i<numOfPaths; i++){
                pathObj[i] = list.getPathObj();

                //---- if there is an unconnected node -----
                if(pathObj[i] == null){
                    errorLbl.setVisible(true);
                    errorLbl.setText("There are unconnected nodes");
                    displayNodesField.setText(""); 
                    list.resetList();
                    error = true;
                    break;
                }
                //------ if there is a cycle ------
                if(list.cycleCheck(pathObj[i]) == true) {
                    errorLbl.setVisible(true);
                    errorLbl.setText("There is a cycle");
                    displayNodesField.setText(""); 
                    error = true;
                    list.resetList();
                    break;
                }
            }
            
            if(error == false){
                pathObj = list.removeDuplicates(pathObj);
            
                //sort by duration
                pathObj = list.sortPaths(pathObj);
        
                String paths = "";
        
                for(int j = 0; j < pathObj.length; j++){
                    paths += pathObj[j];
                }
        
                displayNodesField.setText(paths);
            
                list.resetDependicies();
                }
            }
    }//GEN-LAST:event_listPathsBtnActionPerformed

    private void aboutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutBtnActionPerformed
        // TODO add your handling code here:
        infoTxt.setVisible(true);
        infoTxt.setLineWrap(true);
        infoTxt.setText("This program written and\n"
                + "designed by the following\n"
                + "students for CSE360, for the\n"
                + "Fall of 2018:\n"
                + "Meg Woodford\n"
                + "Matthew Bumb\n"
                + "Xinyi\n"
                + "and Melissa\n"
                + "\n"
                + "To allow users to create a\n"
                + "network diagram, and find all\n"
                + "paths through its nodes,\n"
                + "sorted by duration.");
    }//GEN-LAST:event_aboutBtnActionPerformed

    private void helpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpBtnActionPerformed
        // TODO add your handling code here:
        infoTxt.setVisible(true);
        infoTxt.setLineWrap(true);
        infoTxt.setText("If you are having trouble adding a node be sure"
                + "to make sure all text fields are filled in. If you are experiencing "
                + "a red error message follow the directions given by the red error "
                + "message and try to re-add the node. For all other questions please"
                + "refer to the user manual.");
    }//GEN-LAST:event_helpBtnActionPerformed

    private void ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetActionPerformed
        // TODO add your handling code here:
        errorLbl.setVisible(true);
        errorLbl.setText("Program Reset - All Activities Removed");
        displayNodesField.setText(""); 
        list.resetList();
        durationErrorLbl.setVisible(false);
        requiredLbl.setVisible(false);
        
        //resets textFields
            nodeNameTxt.setText("");
            nodeDurationTxt.setText("");
            nodeDependenciesTxt.setText("");
    }//GEN-LAST:event_ResetActionPerformed

    private void sortDurationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortDurationBtnActionPerformed

        //displays the contents of the linked list
        if(list.isEmpty()== false){
            displayNodesField.setText(list.printString()); 
            errorLbl.setVisible(false);
        }else{
            errorLbl.setVisible(true);
            errorLbl.setText("There are no nodes in list");
        }
        
    }//GEN-LAST:event_sortDurationBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Reset;
    private javax.swing.JButton aboutBtn;
    private javax.swing.JButton addNodeBtn;
    private javax.swing.JTextArea displayNodesField;
    private javax.swing.JLabel durationErrorLbl;
    private javax.swing.JLabel errorLbl;
    private javax.swing.JButton helpBtn;
    private javax.swing.JTextArea infoTxt;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton listPathsBtn;
    private javax.swing.JTextField nodeDependenciesTxt;
    private javax.swing.JLabel nodeDependencieslbl;
    private javax.swing.JTextField nodeDurationTxt;
    private javax.swing.JLabel nodeDurationlbl;
    private javax.swing.JTextField nodeNameTxt;
    private javax.swing.JLabel nodeNamelbl;
    private javax.swing.JLabel requiredLbl;
    private javax.swing.JButton sortDurationBtn;
    // End of variables declaration//GEN-END:variables
}
